# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_t2sdk_api
else:
    import _py_t2sdk_api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_t2sdk_api.delete_SwigPyIterator

    def value(self):
        return _py_t2sdk_api.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_t2sdk_api.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_t2sdk_api.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_t2sdk_api.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_t2sdk_api.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_t2sdk_api.SwigPyIterator_copy(self)

    def next(self):
        return _py_t2sdk_api.SwigPyIterator_next(self)

    def __next__(self):
        return _py_t2sdk_api.SwigPyIterator___next__(self)

    def previous(self):
        return _py_t2sdk_api.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_t2sdk_api.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_t2sdk_api.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_t2sdk_api.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_t2sdk_api.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_t2sdk_api.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_t2sdk_api.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_t2sdk_api.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py_t2sdk_api:
_py_t2sdk_api.SwigPyIterator_swigregister(SwigPyIterator)
class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_t2sdk_api.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_t2sdk_api.StringMap___nonzero__(self)

    def __bool__(self):
        return _py_t2sdk_api.StringMap___bool__(self)

    def __len__(self):
        return _py_t2sdk_api.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _py_t2sdk_api.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _py_t2sdk_api.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _py_t2sdk_api.StringMap_has_key(self, key)

    def keys(self):
        return _py_t2sdk_api.StringMap_keys(self)

    def values(self):
        return _py_t2sdk_api.StringMap_values(self)

    def items(self):
        return _py_t2sdk_api.StringMap_items(self)

    def __contains__(self, key):
        return _py_t2sdk_api.StringMap___contains__(self, key)

    def key_iterator(self):
        return _py_t2sdk_api.StringMap_key_iterator(self)

    def value_iterator(self):
        return _py_t2sdk_api.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _py_t2sdk_api.StringMap___setitem__(self, *args)

    def asdict(self):
        return _py_t2sdk_api.StringMap_asdict(self)

    def __init__(self, *args):
        _py_t2sdk_api.StringMap_swiginit(self, _py_t2sdk_api.new_StringMap(*args))

    def empty(self):
        return _py_t2sdk_api.StringMap_empty(self)

    def size(self):
        return _py_t2sdk_api.StringMap_size(self)

    def swap(self, v):
        return _py_t2sdk_api.StringMap_swap(self, v)

    def begin(self):
        return _py_t2sdk_api.StringMap_begin(self)

    def end(self):
        return _py_t2sdk_api.StringMap_end(self)

    def rbegin(self):
        return _py_t2sdk_api.StringMap_rbegin(self)

    def rend(self):
        return _py_t2sdk_api.StringMap_rend(self)

    def clear(self):
        return _py_t2sdk_api.StringMap_clear(self)

    def get_allocator(self):
        return _py_t2sdk_api.StringMap_get_allocator(self)

    def count(self, x):
        return _py_t2sdk_api.StringMap_count(self, x)

    def erase(self, *args):
        return _py_t2sdk_api.StringMap_erase(self, *args)

    def find(self, x):
        return _py_t2sdk_api.StringMap_find(self, x)

    def lower_bound(self, x):
        return _py_t2sdk_api.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _py_t2sdk_api.StringMap_upper_bound(self, x)
    __swig_destroy__ = _py_t2sdk_api.delete_StringMap

# Register StringMap in _py_t2sdk_api:
_py_t2sdk_api.StringMap_swigregister(StringMap)
class MapVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_t2sdk_api.MapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_t2sdk_api.MapVector___nonzero__(self)

    def __bool__(self):
        return _py_t2sdk_api.MapVector___bool__(self)

    def __len__(self):
        return _py_t2sdk_api.MapVector___len__(self)

    def __getslice__(self, i, j):
        return _py_t2sdk_api.MapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_t2sdk_api.MapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_t2sdk_api.MapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_t2sdk_api.MapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_t2sdk_api.MapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_t2sdk_api.MapVector___setitem__(self, *args)

    def pop(self):
        return _py_t2sdk_api.MapVector_pop(self)

    def append(self, x):
        return _py_t2sdk_api.MapVector_append(self, x)

    def empty(self):
        return _py_t2sdk_api.MapVector_empty(self)

    def size(self):
        return _py_t2sdk_api.MapVector_size(self)

    def swap(self, v):
        return _py_t2sdk_api.MapVector_swap(self, v)

    def begin(self):
        return _py_t2sdk_api.MapVector_begin(self)

    def end(self):
        return _py_t2sdk_api.MapVector_end(self)

    def rbegin(self):
        return _py_t2sdk_api.MapVector_rbegin(self)

    def rend(self):
        return _py_t2sdk_api.MapVector_rend(self)

    def clear(self):
        return _py_t2sdk_api.MapVector_clear(self)

    def get_allocator(self):
        return _py_t2sdk_api.MapVector_get_allocator(self)

    def pop_back(self):
        return _py_t2sdk_api.MapVector_pop_back(self)

    def erase(self, *args):
        return _py_t2sdk_api.MapVector_erase(self, *args)

    def __init__(self, *args):
        _py_t2sdk_api.MapVector_swiginit(self, _py_t2sdk_api.new_MapVector(*args))

    def push_back(self, x):
        return _py_t2sdk_api.MapVector_push_back(self, x)

    def front(self):
        return _py_t2sdk_api.MapVector_front(self)

    def back(self):
        return _py_t2sdk_api.MapVector_back(self)

    def assign(self, n, x):
        return _py_t2sdk_api.MapVector_assign(self, n, x)

    def resize(self, *args):
        return _py_t2sdk_api.MapVector_resize(self, *args)

    def insert(self, *args):
        return _py_t2sdk_api.MapVector_insert(self, *args)

    def reserve(self, n):
        return _py_t2sdk_api.MapVector_reserve(self, n)

    def capacity(self):
        return _py_t2sdk_api.MapVector_capacity(self)
    __swig_destroy__ = _py_t2sdk_api.delete_MapVector

# Register MapVector in _py_t2sdk_api:
_py_t2sdk_api.MapVector_swigregister(MapVector)
class IKnown(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def QueryInterface(self, iid, ppv):
        return _py_t2sdk_api.IKnown_QueryInterface(self, iid, ppv)

    def AddRef(self):
        return _py_t2sdk_api.IKnown_AddRef(self)

    def Release(self):
        return _py_t2sdk_api.IKnown_Release(self)
    __swig_destroy__ = _py_t2sdk_api.delete_IKnown

# Register IKnown in _py_t2sdk_api:
_py_t2sdk_api.IKnown_swigregister(IKnown)
IDENTITY_NAME_LENGTH = _py_t2sdk_api.IDENTITY_NAME_LENGTH
ID_LENGTH = _py_t2sdk_api.ID_LENGTH
ID_STR_LEN = _py_t2sdk_api.ID_STR_LEN
PLUGINID_LENGTH = _py_t2sdk_api.PLUGINID_LENGTH
PLUGIN_NAME_LENGTH = _py_t2sdk_api.PLUGIN_NAME_LENGTH
SVR_NAME_LENGTH = _py_t2sdk_api.SVR_NAME_LENGTH
SVRINSTANCE_NAME_LENGTH = _py_t2sdk_api.SVRINSTANCE_NAME_LENGTH
PACKER_INT_FILE_LIST = _py_t2sdk_api.PACKER_INT_FILE_LIST
PACKER_INT_FILE_ID = _py_t2sdk_api.PACKER_INT_FILE_ID
PACKER_INT_FILE_SIZE = _py_t2sdk_api.PACKER_INT_FILE_SIZE
PACKER_INT_TIME = _py_t2sdk_api.PACKER_INT_TIME
PACKER_STRING_FILE_NAME = _py_t2sdk_api.PACKER_STRING_FILE_NAME
PACKER_STRING_FILE_PATH = _py_t2sdk_api.PACKER_STRING_FILE_PATH
PACKER_STRING_LOCAL_PATH = _py_t2sdk_api.PACKER_STRING_LOCAL_PATH
PACKER_STRING_MD5_CODE = _py_t2sdk_api.PACKER_STRING_MD5_CODE
PACKER_STRING_FILE_FLAG = _py_t2sdk_api.PACKER_STRING_FILE_FLAG
REQUEST_PACKET = _py_t2sdk_api.REQUEST_PACKET
ANSWER_PACKET = _py_t2sdk_api.ANSWER_PACKET
class Route_Info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ospfName = property(_py_t2sdk_api.Route_Info_ospfName_get, _py_t2sdk_api.Route_Info_ospfName_set)
    nbrName = property(_py_t2sdk_api.Route_Info_nbrName_get, _py_t2sdk_api.Route_Info_nbrName_set)
    svrName = property(_py_t2sdk_api.Route_Info_svrName_get, _py_t2sdk_api.Route_Info_svrName_set)
    pluginID = property(_py_t2sdk_api.Route_Info_pluginID_get, _py_t2sdk_api.Route_Info_pluginID_set)
    connectID = property(_py_t2sdk_api.Route_Info_connectID_get, _py_t2sdk_api.Route_Info_connectID_set)
    memberNO = property(_py_t2sdk_api.Route_Info_memberNO_get, _py_t2sdk_api.Route_Info_memberNO_set)

    def __init__(self):
        _py_t2sdk_api.Route_Info_swiginit(self, _py_t2sdk_api.new_Route_Info())
    __swig_destroy__ = _py_t2sdk_api.delete_Route_Info

# Register Route_Info in _py_t2sdk_api:
_py_t2sdk_api.Route_Info_swigregister(Route_Info)
class REQ_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sequeceNo = property(_py_t2sdk_api.REQ_DATA_sequeceNo_get, _py_t2sdk_api.REQ_DATA_sequeceNo_set)
    issueType = property(_py_t2sdk_api.REQ_DATA_issueType_get, _py_t2sdk_api.REQ_DATA_issueType_set)
    lpKeyInfo = property(_py_t2sdk_api.REQ_DATA_lpKeyInfo_get, _py_t2sdk_api.REQ_DATA_lpKeyInfo_set)
    keyInfoLen = property(_py_t2sdk_api.REQ_DATA_keyInfoLen_get, _py_t2sdk_api.REQ_DATA_keyInfoLen_set)
    lpFileHead = property(_py_t2sdk_api.REQ_DATA_lpFileHead_get, _py_t2sdk_api.REQ_DATA_lpFileHead_set)
    fileHeadLen = property(_py_t2sdk_api.REQ_DATA_fileHeadLen_get, _py_t2sdk_api.REQ_DATA_fileHeadLen_set)
    packetType = property(_py_t2sdk_api.REQ_DATA_packetType_get, _py_t2sdk_api.REQ_DATA_packetType_set)
    routeInfo = property(_py_t2sdk_api.REQ_DATA_routeInfo_get, _py_t2sdk_api.REQ_DATA_routeInfo_set)
    iSubSystemNo = property(_py_t2sdk_api.REQ_DATA_iSubSystemNo_get, _py_t2sdk_api.REQ_DATA_iSubSystemNo_set)
    iCompanyID = property(_py_t2sdk_api.REQ_DATA_iCompanyID_get, _py_t2sdk_api.REQ_DATA_iCompanyID_set)

    def __init__(self):
        _py_t2sdk_api.REQ_DATA_swiginit(self, _py_t2sdk_api.new_REQ_DATA())
    __swig_destroy__ = _py_t2sdk_api.delete_REQ_DATA

# Register REQ_DATA in _py_t2sdk_api:
_py_t2sdk_api.REQ_DATA_swigregister(REQ_DATA)
class RET_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    functionID = property(_py_t2sdk_api.RET_DATA_functionID_get, _py_t2sdk_api.RET_DATA_functionID_set)
    returnCode = property(_py_t2sdk_api.RET_DATA_returnCode_get, _py_t2sdk_api.RET_DATA_returnCode_set)
    errorNo = property(_py_t2sdk_api.RET_DATA_errorNo_get, _py_t2sdk_api.RET_DATA_errorNo_set)
    errorInfo = property(_py_t2sdk_api.RET_DATA_errorInfo_get, _py_t2sdk_api.RET_DATA_errorInfo_set)
    issueType = property(_py_t2sdk_api.RET_DATA_issueType_get, _py_t2sdk_api.RET_DATA_issueType_set)
    lpKeyInfo = property(_py_t2sdk_api.RET_DATA_lpKeyInfo_get, _py_t2sdk_api.RET_DATA_lpKeyInfo_set)
    keyInfoLen = property(_py_t2sdk_api.RET_DATA_keyInfoLen_get, _py_t2sdk_api.RET_DATA_keyInfoLen_set)
    sendInfo = property(_py_t2sdk_api.RET_DATA_sendInfo_get, _py_t2sdk_api.RET_DATA_sendInfo_set)

    def __init__(self):
        _py_t2sdk_api.RET_DATA_swiginit(self, _py_t2sdk_api.new_RET_DATA())
    __swig_destroy__ = _py_t2sdk_api.delete_RET_DATA

# Register RET_DATA in _py_t2sdk_api:
_py_t2sdk_api.RET_DATA_swigregister(RET_DATA)
T2SDK_MAX_BRANCH_NO_LEN = _py_t2sdk_api.T2SDK_MAX_BRANCH_NO_LEN
T2SDK_MAX_COMPANY_NO_LEN = _py_t2sdk_api.T2SDK_MAX_COMPANY_NO_LEN
T2SDK_MAX_OSPF_LEN = _py_t2sdk_api.T2SDK_MAX_OSPF_LEN
class SUB_ROUTER_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iSystemNo = property(_py_t2sdk_api.SUB_ROUTER_INFO_iSystemNo_get, _py_t2sdk_api.SUB_ROUTER_INFO_iSystemNo_set)
    iSubSystemNo = property(_py_t2sdk_api.SUB_ROUTER_INFO_iSubSystemNo_get, _py_t2sdk_api.SUB_ROUTER_INFO_iSubSystemNo_set)
    szBranchNo = property(_py_t2sdk_api.SUB_ROUTER_INFO_szBranchNo_get, _py_t2sdk_api.SUB_ROUTER_INFO_szBranchNo_set)
    szCompanyNo = property(_py_t2sdk_api.SUB_ROUTER_INFO_szCompanyNo_get, _py_t2sdk_api.SUB_ROUTER_INFO_szCompanyNo_set)
    szOspfName = property(_py_t2sdk_api.SUB_ROUTER_INFO_szOspfName_get, _py_t2sdk_api.SUB_ROUTER_INFO_szOspfName_set)

    def __init__(self):
        _py_t2sdk_api.SUB_ROUTER_INFO_swiginit(self, _py_t2sdk_api.new_SUB_ROUTER_INFO())
    __swig_destroy__ = _py_t2sdk_api.delete_SUB_ROUTER_INFO

# Register SUB_ROUTER_INFO in _py_t2sdk_api:
_py_t2sdk_api.SUB_ROUTER_INFO_swigregister(SUB_ROUTER_INFO)
class IF2ResultSet(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetColCount(self):
        return _py_t2sdk_api.IF2ResultSet_GetColCount(self)

    def GetColName(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetColName(self, column)

    def GetColType(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetColType(self, column)

    def GetColScale(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetColScale(self, column)

    def GetColWidth(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetColWidth(self, column)

    def FindColIndex(self, columnName):
        return _py_t2sdk_api.IF2ResultSet_FindColIndex(self, columnName)

    def GetStrByIndex(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetStrByIndex(self, column)

    def GetStr(self, columnName):
        return _py_t2sdk_api.IF2ResultSet_GetStr(self, columnName)

    def GetCharByIndex(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetCharByIndex(self, column)

    def GetChar(self, columnName):
        return _py_t2sdk_api.IF2ResultSet_GetChar(self, columnName)

    def GetDoubleByIndex(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetDoubleByIndex(self, column)

    def GetDouble(self, columnName):
        return _py_t2sdk_api.IF2ResultSet_GetDouble(self, columnName)

    def GetIntByIndex(self, column):
        return _py_t2sdk_api.IF2ResultSet_GetIntByIndex(self, column)

    def GetInt(self, columnName):
        return _py_t2sdk_api.IF2ResultSet_GetInt(self, columnName)

    def GetRawByIndex(self, column, lpRawLen):
        return _py_t2sdk_api.IF2ResultSet_GetRawByIndex(self, column, lpRawLen)

    def GetRaw(self, columnName, lpRawLen):
        return _py_t2sdk_api.IF2ResultSet_GetRaw(self, columnName, lpRawLen)

    def WasNull(self):
        return _py_t2sdk_api.IF2ResultSet_WasNull(self)

    def Next(self):
        return _py_t2sdk_api.IF2ResultSet_Next(self)

    def IsEOF(self):
        return _py_t2sdk_api.IF2ResultSet_IsEOF(self)

    def IsEmpty(self):
        return _py_t2sdk_api.IF2ResultSet_IsEmpty(self)

    def Destroy(self):
        return _py_t2sdk_api.IF2ResultSet_Destroy(self)
    __swig_destroy__ = _py_t2sdk_api.delete_IF2ResultSet

# Register IF2ResultSet in _py_t2sdk_api:
_py_t2sdk_api.IF2ResultSet_swigregister(IF2ResultSet)
class IF2Packer(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetBuffer(self, pBuf, iBufSize, iDataLen=0):
        return _py_t2sdk_api.IF2Packer_SetBuffer(self, pBuf, iBufSize, iDataLen)

    def BeginPack(self):
        return _py_t2sdk_api.IF2Packer_BeginPack(self)

    def NewDataset(self, szDatasetName, iReturnCode=0):
        return _py_t2sdk_api.IF2Packer_NewDataset(self, szDatasetName, iReturnCode)

    def AddField(self, *args):
        return _py_t2sdk_api.IF2Packer_AddField(self, *args)

    def AddStr(self, szValue):
        return _py_t2sdk_api.IF2Packer_AddStr(self, szValue)

    def AddInt(self, iValue):
        return _py_t2sdk_api.IF2Packer_AddInt(self, iValue)

    def AddDouble(self, fValue):
        return _py_t2sdk_api.IF2Packer_AddDouble(self, fValue)

    def AddChar(self, cValue):
        return _py_t2sdk_api.IF2Packer_AddChar(self, cValue)

    def AddRaw(self, lpBuff, iLen):
        return _py_t2sdk_api.IF2Packer_AddRaw(self, lpBuff, iLen)

    def EndPack(self):
        return _py_t2sdk_api.IF2Packer_EndPack(self)

    def GetPackBuf(self):
        return _py_t2sdk_api.IF2Packer_GetPackBuf(self)

    def GetPackLen(self):
        return _py_t2sdk_api.IF2Packer_GetPackLen(self)

    def GetPackBufSize(self):
        return _py_t2sdk_api.IF2Packer_GetPackBufSize(self)

    def GetVersion(self):
        return _py_t2sdk_api.IF2Packer_GetVersion(self)

    def SetReturnCode(self, dwRetCode):
        return _py_t2sdk_api.IF2Packer_SetReturnCode(self, dwRetCode)

    def UnPack(self):
        return _py_t2sdk_api.IF2Packer_UnPack(self)

    def FreeMem(self, lpBuf):
        return _py_t2sdk_api.IF2Packer_FreeMem(self, lpBuf)

    def ClearValue(self):
        return _py_t2sdk_api.IF2Packer_ClearValue(self)

    def BeginPackEx(self, szName=None):
        return _py_t2sdk_api.IF2Packer_BeginPackEx(self, szName)

    def ClearDataSet(self):
        return _py_t2sdk_api.IF2Packer_ClearDataSet(self)

    def AddDoubleEx(self, fValue):
        return _py_t2sdk_api.IF2Packer_AddDoubleEx(self, fValue)

    def AddPacker(self, lpPacker):
        return _py_t2sdk_api.IF2Packer_AddPacker(self, lpPacker)

    def AddInt64(self, iValue):
        return _py_t2sdk_api.IF2Packer_AddInt64(self, iValue)
    __swig_destroy__ = _py_t2sdk_api.delete_IF2Packer

# Register IF2Packer in _py_t2sdk_api:
_py_t2sdk_api.IF2Packer_swigregister(IF2Packer)
class IF2UnPacker(IF2ResultSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetVersion(self):
        return _py_t2sdk_api.IF2UnPacker_GetVersion(self)

    def Open(self, lpBuffer, iLen):
        return _py_t2sdk_api.IF2UnPacker_Open(self, lpBuffer, iLen)

    def GetDatasetCount(self):
        return _py_t2sdk_api.IF2UnPacker_GetDatasetCount(self)

    def SetCurrentDatasetByIndex(self, nIndex):
        return _py_t2sdk_api.IF2UnPacker_SetCurrentDatasetByIndex(self, nIndex)

    def SetCurrentDataset(self, szDatasetName):
        return _py_t2sdk_api.IF2UnPacker_SetCurrentDataset(self, szDatasetName)

    def GetPackBuf(self):
        return _py_t2sdk_api.IF2UnPacker_GetPackBuf(self)

    def GetPackLen(self):
        return _py_t2sdk_api.IF2UnPacker_GetPackLen(self)

    def GetRowCount(self):
        return _py_t2sdk_api.IF2UnPacker_GetRowCount(self)

    def First(self):
        return _py_t2sdk_api.IF2UnPacker_First(self)

    def Last(self):
        return _py_t2sdk_api.IF2UnPacker_Last(self)

    def Go(self, nRow):
        return _py_t2sdk_api.IF2UnPacker_Go(self, nRow)

    def GetDatasetName(self):
        return _py_t2sdk_api.IF2UnPacker_GetDatasetName(self)

    def OpenAndCopy(self, lpBuffer, iLen):
        return _py_t2sdk_api.IF2UnPacker_OpenAndCopy(self, lpBuffer, iLen)

    def GetColTypeByName(self, columnName):
        return _py_t2sdk_api.IF2UnPacker_GetColTypeByName(self, columnName)

    def GetColScaleByName(self, columnName):
        return _py_t2sdk_api.IF2UnPacker_GetColScaleByName(self, columnName)

    def GetColWidthByName(self, columnName):
        return _py_t2sdk_api.IF2UnPacker_GetColWidthByName(self, columnName)

    def GetUnpackerByIndex(self, column, lpUnpacker):
        return _py_t2sdk_api.IF2UnPacker_GetUnpackerByIndex(self, column, lpUnpacker)

    def GetUnpacker(self, columnName, lpUnpacker):
        return _py_t2sdk_api.IF2UnPacker_GetUnpacker(self, columnName, lpUnpacker)

    def GetInt64ByIndex(self, columnIndex):
        return _py_t2sdk_api.IF2UnPacker_GetInt64ByIndex(self, columnIndex)

    def GetInt64(self, columnName):
        return _py_t2sdk_api.IF2UnPacker_GetInt64(self, columnName)

    def GetColTypeByNameEx(self, columnName):
        return _py_t2sdk_api.IF2UnPacker_GetColTypeByNameEx(self, columnName)

    def GetColTypeEx(self, column):
        return _py_t2sdk_api.IF2UnPacker_GetColTypeEx(self, column)

    def GetReturnCode(self):
        return _py_t2sdk_api.IF2UnPacker_GetReturnCode(self)
    __swig_destroy__ = _py_t2sdk_api.delete_IF2UnPacker

# Register IF2UnPacker in _py_t2sdk_api:
_py_t2sdk_api.IF2UnPacker_swigregister(IF2UnPacker)
class CConfigInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Load(self, szFileName):
        return _py_t2sdk_api.CConfigInterface_Load(self, szFileName)

    def Save(self, szFileName):
        return _py_t2sdk_api.CConfigInterface_Save(self, szFileName)

    def GetString(self, szSection, szEntry, szDefault):
        return _py_t2sdk_api.CConfigInterface_GetString(self, szSection, szEntry, szDefault)

    def GetInt(self, szSection, szEntry, iDefault):
        return _py_t2sdk_api.CConfigInterface_GetInt(self, szSection, szEntry, iDefault)

    def SetString(self, szSection, szEntry, szValue):
        return _py_t2sdk_api.CConfigInterface_SetString(self, szSection, szEntry, szValue)

    def SetInt(self, szSection, szEntry, iValue):
        return _py_t2sdk_api.CConfigInterface_SetInt(self, szSection, szEntry, iValue)
    __swig_destroy__ = _py_t2sdk_api.delete_CConfigInterface

# Register CConfigInterface in _py_t2sdk_api:
_py_t2sdk_api.CConfigInterface_swigregister(CConfigInterface)
class BIZROUTE_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ospfName = property(_py_t2sdk_api.BIZROUTE_INFO_ospfName_get, _py_t2sdk_api.BIZROUTE_INFO_ospfName_set)
    nbrName = property(_py_t2sdk_api.BIZROUTE_INFO_nbrName_get, _py_t2sdk_api.BIZROUTE_INFO_nbrName_set)
    svrName = property(_py_t2sdk_api.BIZROUTE_INFO_svrName_get, _py_t2sdk_api.BIZROUTE_INFO_svrName_set)
    pluginID = property(_py_t2sdk_api.BIZROUTE_INFO_pluginID_get, _py_t2sdk_api.BIZROUTE_INFO_pluginID_set)
    connectID = property(_py_t2sdk_api.BIZROUTE_INFO_connectID_get, _py_t2sdk_api.BIZROUTE_INFO_connectID_set)
    memberNO = property(_py_t2sdk_api.BIZROUTE_INFO_memberNO_get, _py_t2sdk_api.BIZROUTE_INFO_memberNO_set)

    def __init__(self):
        _py_t2sdk_api.BIZROUTE_INFO_swiginit(self, _py_t2sdk_api.new_BIZROUTE_INFO())
    __swig_destroy__ = _py_t2sdk_api.delete_BIZROUTE_INFO

# Register BIZROUTE_INFO in _py_t2sdk_api:
_py_t2sdk_api.BIZROUTE_INFO_swigregister(BIZROUTE_INFO)
class IBizMessage(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFunction(self, nFUnctionNo):
        return _py_t2sdk_api.IBizMessage_SetFunction(self, nFUnctionNo)

    def GetFunction(self):
        return _py_t2sdk_api.IBizMessage_GetFunction(self)

    def SetPacketType(self, nPacketType):
        return _py_t2sdk_api.IBizMessage_SetPacketType(self, nPacketType)

    def GetPacketType(self):
        return _py_t2sdk_api.IBizMessage_GetPacketType(self)

    def SetBranchNo(self, nBranchNo):
        return _py_t2sdk_api.IBizMessage_SetBranchNo(self, nBranchNo)

    def GetBranchNo(self):
        return _py_t2sdk_api.IBizMessage_GetBranchNo(self)

    def SetSystemNo(self, nSystemNo):
        return _py_t2sdk_api.IBizMessage_SetSystemNo(self, nSystemNo)

    def GetSystemNo(self):
        return _py_t2sdk_api.IBizMessage_GetSystemNo(self)

    def SetSubSystemNo(self, nSubSystemNo):
        return _py_t2sdk_api.IBizMessage_SetSubSystemNo(self, nSubSystemNo)

    def GetSubSystemNo(self):
        return _py_t2sdk_api.IBizMessage_GetSubSystemNo(self)

    def SetSenderId(self, nSenderId):
        return _py_t2sdk_api.IBizMessage_SetSenderId(self, nSenderId)

    def GetSenderId(self):
        return _py_t2sdk_api.IBizMessage_GetSenderId(self)

    def SetPacketId(self, nPacketId):
        return _py_t2sdk_api.IBizMessage_SetPacketId(self, nPacketId)

    def GetPacketId(self):
        return _py_t2sdk_api.IBizMessage_GetPacketId(self)

    def SetTargetInfo(self, targetInfo):
        return _py_t2sdk_api.IBizMessage_SetTargetInfo(self, targetInfo)

    def GetTargetInfo(self, targetInfo):
        return _py_t2sdk_api.IBizMessage_GetTargetInfo(self, targetInfo)

    def SetSendInfo(self, sendInfo):
        return _py_t2sdk_api.IBizMessage_SetSendInfo(self, sendInfo)

    def GetSendInfo(self, sendInfo):
        return _py_t2sdk_api.IBizMessage_GetSendInfo(self, sendInfo)

    def SetErrorNo(self, nErrorNo):
        return _py_t2sdk_api.IBizMessage_SetErrorNo(self, nErrorNo)

    def GetErrorNo(self):
        return _py_t2sdk_api.IBizMessage_GetErrorNo(self)

    def SetErrorInfo(self, strErrorInfo):
        return _py_t2sdk_api.IBizMessage_SetErrorInfo(self, strErrorInfo)

    def GetErrorInfo(self):
        return _py_t2sdk_api.IBizMessage_GetErrorInfo(self)

    def SetReturnCode(self, nReturnCode):
        return _py_t2sdk_api.IBizMessage_SetReturnCode(self, nReturnCode)

    def GetReturnCode(self):
        return _py_t2sdk_api.IBizMessage_GetReturnCode(self)

    def SetContent(self, lpContent, iLen):
        return _py_t2sdk_api.IBizMessage_SetContent(self, lpContent, iLen)

    def GetContent(self, iLen):
        return _py_t2sdk_api.IBizMessage_GetContent(self, iLen)

    def SetIssueType(self, nIssueType):
        return _py_t2sdk_api.IBizMessage_SetIssueType(self, nIssueType)

    def GetIssueType(self):
        return _py_t2sdk_api.IBizMessage_GetIssueType(self)

    def SetSequeceNo(self, nSequeceNo):
        return _py_t2sdk_api.IBizMessage_SetSequeceNo(self, nSequeceNo)

    def GetSequeceNo(self):
        return _py_t2sdk_api.IBizMessage_GetSequeceNo(self)

    def SetKeyInfo(self, lpKeyData, iLen):
        return _py_t2sdk_api.IBizMessage_SetKeyInfo(self, lpKeyData, iLen)

    def GetKeyInfo(self, iLen):
        return _py_t2sdk_api.IBizMessage_GetKeyInfo(self, iLen)

    def SetAppData(self, lpAppdata, nAppLen):
        return _py_t2sdk_api.IBizMessage_SetAppData(self, lpAppdata, nAppLen)

    def GetAppData(self, nAppLen):
        return _py_t2sdk_api.IBizMessage_GetAppData(self, nAppLen)

    def ChangeReq2AnsMessage(self):
        return _py_t2sdk_api.IBizMessage_ChangeReq2AnsMessage(self)

    def GetBuff(self, nBuffLen):
        return _py_t2sdk_api.IBizMessage_GetBuff(self, nBuffLen)

    def SetBuff(self, lpBuff, nBuffLen):
        return _py_t2sdk_api.IBizMessage_SetBuff(self, lpBuff, nBuffLen)

    def ReSet(self):
        return _py_t2sdk_api.IBizMessage_ReSet(self)

    def SetCompanyID(self, nCompanyID):
        return _py_t2sdk_api.IBizMessage_SetCompanyID(self, nCompanyID)

    def GetCompanyID(self):
        return _py_t2sdk_api.IBizMessage_GetCompanyID(self)

    def SetSenderCompanyID(self, nSenderCompanyID):
        return _py_t2sdk_api.IBizMessage_SetSenderCompanyID(self, nSenderCompanyID)

    def GetSenderCompanyID(self):
        return _py_t2sdk_api.IBizMessage_GetSenderCompanyID(self)

    def SetInternalLicense(self, nInternalLicense):
        return _py_t2sdk_api.IBizMessage_SetInternalLicense(self, nInternalLicense)

    def GetInternalLicense(self):
        return _py_t2sdk_api.IBizMessage_GetInternalLicense(self)

    def SetAppReserved(self, lpAppReserved, nLen):
        return _py_t2sdk_api.IBizMessage_SetAppReserved(self, lpAppReserved, nLen)

    def GetAppReserved(self, nLen):
        return _py_t2sdk_api.IBizMessage_GetAppReserved(self, nLen)

    def SetTopicInfo(self, lpTopicName):
        return _py_t2sdk_api.IBizMessage_SetTopicInfo(self, lpTopicName)

    def GetTopicInfo(self):
        return _py_t2sdk_api.IBizMessage_GetTopicInfo(self)

    def SetFilterInfo(self, lpFilterInfo, index=0):
        return _py_t2sdk_api.IBizMessage_SetFilterInfo(self, lpFilterInfo, index)

    def GetFilterInfo(self, index=0):
        return _py_t2sdk_api.IBizMessage_GetFilterInfo(self, index)

    def SetShardingInfo(self, lpShardingInfo):
        return _py_t2sdk_api.IBizMessage_SetShardingInfo(self, lpShardingInfo)

    def GetShardingInfo(self):
        return _py_t2sdk_api.IBizMessage_GetShardingInfo(self)

    def SetFunctionEx(self, szFunction):
        return _py_t2sdk_api.IBizMessage_SetFunctionEx(self, szFunction)

    def GetFunctionEx(self):
        return _py_t2sdk_api.IBizMessage_GetFunctionEx(self)

    def SetDebugType(self, szString, index):
        return _py_t2sdk_api.IBizMessage_SetDebugType(self, szString, index)

    def GetDebugType(self, index):
        return _py_t2sdk_api.IBizMessage_GetDebugType(self, index)
    __swig_destroy__ = _py_t2sdk_api.delete_IBizMessage

# Register IBizMessage in _py_t2sdk_api:
_py_t2sdk_api.IBizMessage_swigregister(IBizMessage)
MAX_MACADDRESS_LEN = _py_t2sdk_api.MAX_MACADDRESS_LEN
MAX_RAND_LEN = _py_t2sdk_api.MAX_RAND_LEN
MAX_BIZNAME_LEN = _py_t2sdk_api.MAX_BIZNAME_LEN
INIT_RECVQ_LEN = _py_t2sdk_api.INIT_RECVQ_LEN
STEP_RECVQ_LEN = _py_t2sdk_api.STEP_RECVQ_LEN
SIMPLIFIED_CHINESE = _py_t2sdk_api.SIMPLIFIED_CHINESE
ENGLISH = _py_t2sdk_api.ENGLISH
MAX_FILTERFIELD_LEN = _py_t2sdk_api.MAX_FILTERFIELD_LEN
LEVEL_DOBEST = _py_t2sdk_api.LEVEL_DOBEST
LEVEL_DOBEST_BYSEQ = _py_t2sdk_api.LEVEL_DOBEST_BYSEQ
LEVEL_MEM = _py_t2sdk_api.LEVEL_MEM
LEVEL_FILE = _py_t2sdk_api.LEVEL_FILE
LEVEL_SYSTEM = _py_t2sdk_api.LEVEL_SYSTEM
class CFilterInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetFilterNameByIndex(self, index):
        return _py_t2sdk_api.CFilterInterface_GetFilterNameByIndex(self, index)

    def GetFilterValueByIndex(self, index):
        return _py_t2sdk_api.CFilterInterface_GetFilterValueByIndex(self, index)

    def GetFilterValue(self, fileName):
        return _py_t2sdk_api.CFilterInterface_GetFilterValue(self, fileName)

    def GetCount(self):
        return _py_t2sdk_api.CFilterInterface_GetCount(self)

    def SetFilter(self, filterName, filterValue):
        return _py_t2sdk_api.CFilterInterface_SetFilter(self, filterName, filterValue)
    __swig_destroy__ = _py_t2sdk_api.delete_CFilterInterface

# Register CFilterInterface in _py_t2sdk_api:
_py_t2sdk_api.CFilterInterface_swigregister(CFilterInterface)
class CSubscribeParamInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTopicName(self, szName):
        return _py_t2sdk_api.CSubscribeParamInterface_SetTopicName(self, szName)

    def SetAppData(self, lpData, iLen):
        return _py_t2sdk_api.CSubscribeParamInterface_SetAppData(self, lpData, iLen)

    def SetFilter(self, filterName, filterValue):
        return _py_t2sdk_api.CSubscribeParamInterface_SetFilter(self, filterName, filterValue)

    def SetReturnFiled(self, filedName):
        return _py_t2sdk_api.CSubscribeParamInterface_SetReturnFiled(self, filedName)

    def SetFromNow(self, bFromNow):
        return _py_t2sdk_api.CSubscribeParamInterface_SetFromNow(self, bFromNow)

    def SetReplace(self, bReplace):
        return _py_t2sdk_api.CSubscribeParamInterface_SetReplace(self, bReplace)

    def SetSendInterval(self, nSendInterval):
        return _py_t2sdk_api.CSubscribeParamInterface_SetSendInterval(self, nSendInterval)

    def GetTopicName(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetTopicName(self)

    def GetAppData(self, iLen):
        return _py_t2sdk_api.CSubscribeParamInterface_GetAppData(self, iLen)

    def GetFilterNameByIndex(self, index):
        return _py_t2sdk_api.CSubscribeParamInterface_GetFilterNameByIndex(self, index)

    def GetFilterValueByIndex(self, index):
        return _py_t2sdk_api.CSubscribeParamInterface_GetFilterValueByIndex(self, index)

    def GetFilterValue(self, fileName):
        return _py_t2sdk_api.CSubscribeParamInterface_GetFilterValue(self, fileName)

    def GetFilterCount(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetFilterCount(self)

    def GetReturnFiled(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetReturnFiled(self)

    def GetFromNow(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetFromNow(self)

    def GetReplace(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetReplace(self)

    def GetSendInterval(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetSendInterval(self)

    def SetUpdateMsgNo(self, bUpdate):
        return _py_t2sdk_api.CSubscribeParamInterface_SetUpdateMsgNo(self, bUpdate)

    def GetUpdateMsgNo(self):
        return _py_t2sdk_api.CSubscribeParamInterface_GetUpdateMsgNo(self)
    __swig_destroy__ = _py_t2sdk_api.delete_CSubscribeParamInterface

# Register CSubscribeParamInterface in _py_t2sdk_api:
_py_t2sdk_api.CSubscribeParamInterface_swigregister(CSubscribeParamInterface)
class SUBSCRIBE_RECVDATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lpFilterData = property(_py_t2sdk_api.SUBSCRIBE_RECVDATA_lpFilterData_get, _py_t2sdk_api.SUBSCRIBE_RECVDATA_lpFilterData_set)
    iFilterDataLen = property(_py_t2sdk_api.SUBSCRIBE_RECVDATA_iFilterDataLen_get, _py_t2sdk_api.SUBSCRIBE_RECVDATA_iFilterDataLen_set)
    lpAppData = property(_py_t2sdk_api.SUBSCRIBE_RECVDATA_lpAppData_get, _py_t2sdk_api.SUBSCRIBE_RECVDATA_lpAppData_set)
    iAppDataLen = property(_py_t2sdk_api.SUBSCRIBE_RECVDATA_iAppDataLen_get, _py_t2sdk_api.SUBSCRIBE_RECVDATA_iAppDataLen_set)
    szTopicName = property(_py_t2sdk_api.SUBSCRIBE_RECVDATA_szTopicName_get, _py_t2sdk_api.SUBSCRIBE_RECVDATA_szTopicName_set)

    def __init__(self):
        _py_t2sdk_api.SUBSCRIBE_RECVDATA_swiginit(self, _py_t2sdk_api.new_SUBSCRIBE_RECVDATA())
    __swig_destroy__ = _py_t2sdk_api.delete_SUBSCRIBE_RECVDATA

# Register SUBSCRIBE_RECVDATA in _py_t2sdk_api:
_py_t2sdk_api.SUBSCRIBE_RECVDATA_swigregister(SUBSCRIBE_RECVDATA)
class CSubCallbackInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OnReceived(self, lpSub, subscribeIndex, lpData, nLength, lpRecvData):
        return _py_t2sdk_api.CSubCallbackInterface_OnReceived(self, lpSub, subscribeIndex, lpData, nLength, lpRecvData)

    def OnRecvTickMsg(self, lpSub, subscribeIndex, TickMsgInfo):
        return _py_t2sdk_api.CSubCallbackInterface_OnRecvTickMsg(self, lpSub, subscribeIndex, TickMsgInfo)
    __swig_destroy__ = _py_t2sdk_api.delete_CSubCallbackInterface

# Register CSubCallbackInterface in _py_t2sdk_api:
_py_t2sdk_api.CSubCallbackInterface_swigregister(CSubCallbackInterface)
class CSubscribeInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SubscribeTopic(self, lpSubscribeParamInter, uiTimeout, lppBizUnPack=None, lpBizPack=None):
        return _py_t2sdk_api.CSubscribeInterface_SubscribeTopic(self, lpSubscribeParamInter, uiTimeout, lppBizUnPack, lpBizPack)

    def CancelSubscribeTopic(self, subscribeIndex):
        return _py_t2sdk_api.CSubscribeInterface_CancelSubscribeTopic(self, subscribeIndex)

    def CancelSubscribeTopicEx(self, topicName, lpFilterInterface):
        return _py_t2sdk_api.CSubscribeInterface_CancelSubscribeTopicEx(self, topicName, lpFilterInterface)

    def GetSubcribeTopic(self, lpPack):
        return _py_t2sdk_api.CSubscribeInterface_GetSubcribeTopic(self, lpPack)

    def GetServerAddress(self, lpPort):
        return _py_t2sdk_api.CSubscribeInterface_GetServerAddress(self, lpPort)

    def GetTopic(self, byForce, iTimeOut):
        return _py_t2sdk_api.CSubscribeInterface_GetTopic(self, byForce, iTimeOut)

    def BatchSubscribeTopic(self, lpSubReqUnpack, lpSubAnsPacker, uiTimeout):
        return _py_t2sdk_api.CSubscribeInterface_BatchSubscribeTopic(self, lpSubReqUnpack, lpSubAnsPacker, uiTimeout)

    def GetSessionStatus(self):
        return _py_t2sdk_api.CSubscribeInterface_GetSessionStatus(self)
    __swig_destroy__ = _py_t2sdk_api.delete_CSubscribeInterface

# Register CSubscribeInterface in _py_t2sdk_api:
_py_t2sdk_api.CSubscribeInterface_swigregister(CSubscribeInterface)
class CPublishInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def PubMsgByPacker(self, topicName, lpUnPacker, iTimeOut=-1, lppBizUnPack=None, bAddTimeStamp=False):
        return _py_t2sdk_api.CPublishInterface_PubMsgByPacker(self, topicName, lpUnPacker, iTimeOut, lppBizUnPack, bAddTimeStamp)

    def PubMsg(self, topicName, lpFilterInterface, lpData, nLength, iTimeOut=-1, lppBizUnPack=None, bAddTimeStamp=False):
        return _py_t2sdk_api.CPublishInterface_PubMsg(self, topicName, lpFilterInterface, lpData, nLength, iTimeOut, lppBizUnPack, bAddTimeStamp)

    def GetMsgNoByTopicName(self, topicName):
        return _py_t2sdk_api.CPublishInterface_GetMsgNoByTopicName(self, topicName)

    def GetServerAddress(self, lpPort):
        return _py_t2sdk_api.CPublishInterface_GetServerAddress(self, lpPort)
    __swig_destroy__ = _py_t2sdk_api.delete_CPublishInterface

# Register CPublishInterface in _py_t2sdk_api:
_py_t2sdk_api.CPublishInterface_swigregister(CPublishInterface)
class CFileUpdateCallbackInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OnRecvFileList(self, lpData, nLength, lpErrorInfo):
        return _py_t2sdk_api.CFileUpdateCallbackInterface_OnRecvFileList(self, lpData, nLength, lpErrorInfo)

    def OnShowProcessBar(self, iOneFileProcessBar, iTotalProcessBar, lpErrorInfo):
        return _py_t2sdk_api.CFileUpdateCallbackInterface_OnShowProcessBar(self, iOneFileProcessBar, iTotalProcessBar, lpErrorInfo)

    def OnCancel(self):
        return _py_t2sdk_api.CFileUpdateCallbackInterface_OnCancel(self)
    __swig_destroy__ = _py_t2sdk_api.delete_CFileUpdateCallbackInterface

# Register CFileUpdateCallbackInterface in _py_t2sdk_api:
_py_t2sdk_api.CFileUpdateCallbackInterface_swigregister(CFileUpdateCallbackInterface)
class CFileUpdateInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def UpdateFile(self, lpPack):
        return _py_t2sdk_api.CFileUpdateInterface_UpdateFile(self, lpPack)

    def CancelUpdateFile(self):
        return _py_t2sdk_api.CFileUpdateInterface_CancelUpdateFile(self)

    def GetFileUpdateList(self):
        return _py_t2sdk_api.CFileUpdateInterface_GetFileUpdateList(self)
    __swig_destroy__ = _py_t2sdk_api.delete_CFileUpdateInterface

# Register CFileUpdateInterface in _py_t2sdk_api:
_py_t2sdk_api.CFileUpdateInterface_swigregister(CFileUpdateInterface)
class CCallbackInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OnConnect(self, lpConnection):
        return _py_t2sdk_api.CCallbackInterface_OnConnect(self, lpConnection)

    def OnSafeConnect(self, lpConnection):
        return _py_t2sdk_api.CCallbackInterface_OnSafeConnect(self, lpConnection)

    def OnRegister(self, lpConnection):
        return _py_t2sdk_api.CCallbackInterface_OnRegister(self, lpConnection)

    def OnClose(self, lpConnection):
        return _py_t2sdk_api.CCallbackInterface_OnClose(self, lpConnection)

    def OnSent(self, lpConnection, hSend, reserved1, reserved2, nQueuingData):
        return _py_t2sdk_api.CCallbackInterface_OnSent(self, lpConnection, hSend, reserved1, reserved2, nQueuingData)

    def Reserved1(self, a, b, c, d):
        return _py_t2sdk_api.CCallbackInterface_Reserved1(self, a, b, c, d)

    def Reserved2(self, a, b, c, d):
        return _py_t2sdk_api.CCallbackInterface_Reserved2(self, a, b, c, d)

    def Reserved3(self):
        return _py_t2sdk_api.CCallbackInterface_Reserved3(self)

    def Reserved4(self):
        return _py_t2sdk_api.CCallbackInterface_Reserved4(self)

    def Reserved5(self):
        return _py_t2sdk_api.CCallbackInterface_Reserved5(self)

    def Reserved6(self):
        return _py_t2sdk_api.CCallbackInterface_Reserved6(self)

    def Reserved7(self):
        return _py_t2sdk_api.CCallbackInterface_Reserved7(self)

    def OnReceivedBiz(self, lpConnection, hSend, lpUnPackerOrStr, nResult):
        return _py_t2sdk_api.CCallbackInterface_OnReceivedBiz(self, lpConnection, hSend, lpUnPackerOrStr, nResult)

    def OnReceivedBizEx(self, lpConnection, hSend, lpRetData, lpUnpackerOrStr, nResult):
        return _py_t2sdk_api.CCallbackInterface_OnReceivedBizEx(self, lpConnection, hSend, lpRetData, lpUnpackerOrStr, nResult)

    def OnReceivedBizMsg(self, lpConnection, hSend, lpMsg):
        return _py_t2sdk_api.CCallbackInterface_OnReceivedBizMsg(self, lpConnection, hSend, lpMsg)
    __swig_destroy__ = _py_t2sdk_api.delete_CCallbackInterface

# Register CCallbackInterface in _py_t2sdk_api:
_py_t2sdk_api.CCallbackInterface_swigregister(CCallbackInterface)
class CConnectionInterface(IKnown):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Disconnected = _py_t2sdk_api.CConnectionInterface_Disconnected
    Connecting = _py_t2sdk_api.CConnectionInterface_Connecting
    Connected = _py_t2sdk_api.CConnectionInterface_Connected
    SafeConnecting = _py_t2sdk_api.CConnectionInterface_SafeConnecting
    SafeConnected = _py_t2sdk_api.CConnectionInterface_SafeConnected
    Registering = _py_t2sdk_api.CConnectionInterface_Registering
    Registered = _py_t2sdk_api.CConnectionInterface_Registered
    Rejected = _py_t2sdk_api.CConnectionInterface_Rejected
    JustRemoveHandle = _py_t2sdk_api.CConnectionInterface_JustRemoveHandle

    def Create(self, lpCallback):
        return _py_t2sdk_api.CConnectionInterface_Create(self, lpCallback)

    def Connect(self, uiTimeout):
        return _py_t2sdk_api.CConnectionInterface_Connect(self, uiTimeout)

    def Close(self):
        return _py_t2sdk_api.CConnectionInterface_Close(self)

    def Reserved1(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved1(self)

    def Reserved2(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved2(self)

    def Reserved3(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved3(self)

    def Reserved4(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved4(self)

    def Reserved5(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved5(self)

    def Reserved6(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved6(self)

    def GetServerAddress(self, lpPort):
        return _py_t2sdk_api.CConnectionInterface_GetServerAddress(self, lpPort)

    def GetStatus(self):
        return _py_t2sdk_api.CConnectionInterface_GetStatus(self)

    def GetServerLoad(self):
        return _py_t2sdk_api.CConnectionInterface_GetServerLoad(self)

    def GetErrorMsg(self, nErrorCode):
        return _py_t2sdk_api.CConnectionInterface_GetErrorMsg(self, nErrorCode)

    def GetConnectError(self):
        return _py_t2sdk_api.CConnectionInterface_GetConnectError(self)

    def SendBiz(self, iFunID, lpPacker, nAsy=0, iSystemNo=0, nCompressID=1):
        return _py_t2sdk_api.CConnectionInterface_SendBiz(self, iFunID, lpPacker, nAsy, iSystemNo, nCompressID)

    def RecvBiz(self, hSend, lppUnPackerOrStr, uiTimeout=1000, uiFlag=0):
        return _py_t2sdk_api.CConnectionInterface_RecvBiz(self, hSend, lppUnPackerOrStr, uiTimeout, uiFlag)

    def SendBizEx(self, iFunID, lpPacker, svrName, nAsy=0, iSystemNo=0, nCompressID=1, branchNo=0, lpRequest=None):
        return _py_t2sdk_api.CConnectionInterface_SendBizEx(self, iFunID, lpPacker, svrName, nAsy, iSystemNo, nCompressID, branchNo, lpRequest)

    def RecvBizEx(self, hSend, lppUnpackerOrStr, lpRetData, uiTimeout=1000, uiFlag=0):
        return _py_t2sdk_api.CConnectionInterface_RecvBizEx(self, hSend, lppUnpackerOrStr, lpRetData, uiTimeout, uiFlag)

    def CreateEx(self, lpCallback):
        return _py_t2sdk_api.CConnectionInterface_CreateEx(self, lpCallback)

    def GetRealAddress(self):
        return _py_t2sdk_api.CConnectionInterface_GetRealAddress(self)

    def Reserved8(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved8(self)

    def Reserved9(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved9(self)

    def GetSelfAddress(self):
        return _py_t2sdk_api.CConnectionInterface_GetSelfAddress(self)

    def GetSelfMac(self):
        return _py_t2sdk_api.CConnectionInterface_GetSelfMac(self)

    def NewSubscriber(self, lpCallback, SubScribeName, iTimeOut, iInitRecvQLen=256, iStepRecvQLen=512):
        return _py_t2sdk_api.CConnectionInterface_NewSubscriber(self, lpCallback, SubScribeName, iTimeOut, iInitRecvQLen, iStepRecvQLen)

    def NewPublisher(self, PublishName, msgCount, iTimeOut, bResetNo=False):
        return _py_t2sdk_api.CConnectionInterface_NewPublisher(self, PublishName, msgCount, iTimeOut, bResetNo)

    def GetTopic(self, byForce, iTimeOut):
        return _py_t2sdk_api.CConnectionInterface_GetTopic(self, byForce, iTimeOut)

    def GetMCLastError(self):
        return _py_t2sdk_api.CConnectionInterface_GetMCLastError(self)

    def Create2BizMsg(self, lpCallback):
        return _py_t2sdk_api.CConnectionInterface_Create2BizMsg(self, lpCallback)

    def SendBizMsg(self, lpMsg, nAsy=0):
        return _py_t2sdk_api.CConnectionInterface_SendBizMsg(self, lpMsg, nAsy)

    def RecvBizMsg(self, hSend, lpMsg, uiTimeout=1000, uiFlag=0):
        return _py_t2sdk_api.CConnectionInterface_RecvBizMsg(self, hSend, lpMsg, uiTimeout, uiFlag)

    def NewFileUpdate(self, szTopicName, lpCallBack, szScanDir, szUpdateDir, uiTimeOut=5000, szDirFilter=None):
        return _py_t2sdk_api.CConnectionInterface_NewFileUpdate(self, szTopicName, lpCallBack, szScanDir, szUpdateDir, uiTimeOut, szDirFilter)

    def GetFileUpdateLastError(self):
        return _py_t2sdk_api.CConnectionInterface_GetFileUpdateLastError(self)

    def GetLastAnsError(self, bAsyError=False):
        return _py_t2sdk_api.CConnectionInterface_GetLastAnsError(self, bAsyError)

    def NewSubscriberEx(self, lpCallback, SubScribeName, subRoterInfo, iTimeOut, iInitRecvQLen=256, iStepRecvQLen=512):
        return _py_t2sdk_api.CConnectionInterface_NewSubscriberEx(self, lpCallback, SubScribeName, subRoterInfo, iTimeOut, iInitRecvQLen, iStepRecvQLen)

    def SetUserToken(self, szUserToken):
        return _py_t2sdk_api.CConnectionInterface_SetUserToken(self, szUserToken)

    def NewClusterSubscriber(self, lpCallback, SubScribeName, subRoterInfo, iTimeOut, iInitRecvQLen=256, iStepRecvQLen=512):
        return _py_t2sdk_api.CConnectionInterface_NewClusterSubscriber(self, lpCallback, SubScribeName, subRoterInfo, iTimeOut, iInitRecvQLen, iStepRecvQLen)

    def GetServerNodeName(self):
        return _py_t2sdk_api.CConnectionInterface_GetServerNodeName(self)

    def RecycleDataBuf(self, lpData):
        return _py_t2sdk_api.CConnectionInterface_RecycleDataBuf(self, lpData)

    def SetUniquePrefix(self, lpPrefix):
        return _py_t2sdk_api.CConnectionInterface_SetUniquePrefix(self, lpPrefix)

    def ActiveClose(self, bSafe=False, uiTimeout=5000):
        return _py_t2sdk_api.CConnectionInterface_ActiveClose(self, bSafe, uiTimeout)

    def SetServers(self, szServers):
        return _py_t2sdk_api.CConnectionInterface_SetServers(self, szServers)

    def NewFileUpdateEx(self, szTopicName, lpCallBack, szScanDir, szUpdateDir, uiTimeOut=5000, szDirFilter=None, lpRoterInfo=None):
        return _py_t2sdk_api.CConnectionInterface_NewFileUpdateEx(self, szTopicName, lpCallBack, szScanDir, szUpdateDir, uiTimeOut, szDirFilter, lpRoterInfo)

    def CreateSecurity(self, lpCallback):
        return _py_t2sdk_api.CConnectionInterface_CreateSecurity(self, lpCallback)

    def GeneraterKey(self, szPubKey, uKeyLen):
        return _py_t2sdk_api.CConnectionInterface_GeneraterKey(self, szPubKey, uKeyLen)

    def IsSafe(self):
        return _py_t2sdk_api.CConnectionInterface_IsSafe(self)

    def GEER_CertQueryAllLocal(self, cert_dir, cert_dfk, cert_buf, cert_buf_len):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertQueryAllLocal(self, cert_dir, cert_dfk, cert_buf, cert_buf_len)

    def GEER_CertDelay(self, sks_user, sks_server, sks_password, sks_pin=None):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertDelay(self, sks_user, sks_server, sks_password, sks_pin)

    def GEER_CertRevoke(self, sks_user, sks_server, sks_password, sks_pin=None):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertRevoke(self, sks_user, sks_server, sks_password, sks_pin)

    def GEER_PinReset(self, sks_user, sks_server, sks_password, newPin):
        return _py_t2sdk_api.CConnectionInterface_GEER_PinReset(self, sks_user, sks_server, sks_password, newPin)

    def GEER_ChangePin(self, sks_user, sks_server, oldPin, newPin, retryCount):
        return _py_t2sdk_api.CConnectionInterface_GEER_ChangePin(self, sks_user, sks_server, oldPin, newPin, retryCount)

    def GEER_VerifyPin(self, sks_user, sks_server, pin, retryCount):
        return _py_t2sdk_api.CConnectionInterface_GEER_VerifyPin(self, sks_user, sks_server, pin, retryCount)

    def Reserved10(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved10(self)

    def Reserved11(self):
        return _py_t2sdk_api.CConnectionInterface_Reserved11(self)

    def Create2BizMsgGM(self, lpCallback):
        return _py_t2sdk_api.CConnectionInterface_Create2BizMsgGM(self, lpCallback)

    def GEER_CertQueryAllEndpoint(self, sks_user, sks_server, sks_password, cert_buf, cert_buf_len):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertQueryAllEndpoint(self, sks_user, sks_server, sks_password, cert_buf, cert_buf_len)

    def GEER_CertState(self, sks_user, sks_server, localOnly, state):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertState(self, sks_user, sks_server, localOnly, state)

    def GEER_CertEnroll(self, sks_user, sks_server, sks_password, sks_pin):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertEnroll(self, sks_user, sks_server, sks_password, sks_pin)

    def GEER_ErrString(self, err_code, charset, err_msg, msg_len):
        return _py_t2sdk_api.CConnectionInterface_GEER_ErrString(self, err_code, charset, err_msg, msg_len)

    def GetGEERLastErrorNo(self):
        return _py_t2sdk_api.CConnectionInterface_GetGEERLastErrorNo(self)

    def GetCtst(self, szService, szVerifyLib, iTimeOut, szResult, iRstLen, bForce=False):
        return _py_t2sdk_api.CConnectionInterface_GetCtst(self, szService, szVerifyLib, iTimeOut, szResult, iRstLen, bForce)

    def GetXASJLastErrorNo(self):
        return _py_t2sdk_api.CConnectionInterface_GetXASJLastErrorNo(self)

    def XASJ_ListSignCert(self, if_user, if_serverIP, if_password, if_serviceID, if_appID, if_secretKey, cert_buf, cert_buf_len):
        return _py_t2sdk_api.CConnectionInterface_XASJ_ListSignCert(self, if_user, if_serverIP, if_password, if_serviceID, if_appID, if_secretKey, cert_buf, cert_buf_len)

    def XASJ_RevokeSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey, pCertID=None):
        return _py_t2sdk_api.CConnectionInterface_XASJ_RevokeSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey, pCertID)

    def XASJ_PinReset(self, if_user, if_serverIP, if_password, if_serviceID, if_appID, if_secretKey, newPin):
        return _py_t2sdk_api.CConnectionInterface_XASJ_PinReset(self, if_user, if_serverIP, if_password, if_serviceID, if_appID, if_secretKey, newPin)

    def XASJ_ChangePin(self, if_user, if_serverIP, if_serviceID, if_appID, if_secretKey, oldPin, newPin):
        return _py_t2sdk_api.CConnectionInterface_XASJ_ChangePin(self, if_user, if_serverIP, if_serviceID, if_appID, if_secretKey, oldPin, newPin)

    def XASJ_VerifyPin(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey, retryCount):
        return _py_t2sdk_api.CConnectionInterface_XASJ_VerifyPin(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey, retryCount)

    def XASJ_CheckCertStatus(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey):
        return _py_t2sdk_api.CConnectionInterface_XASJ_CheckCertStatus(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey)

    def XASJ_DownSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey):
        return _py_t2sdk_api.CConnectionInterface_XASJ_DownSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey)

    def XASJ_UpdateSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey):
        return _py_t2sdk_api.CConnectionInterface_XASJ_UpdateSignCert(self, if_user, if_serverIP, if_password, if_pin, if_serviceID, if_appID, if_secretKey)

    def XASJ_StrError(self, err_code):
        return _py_t2sdk_api.CConnectionInterface_XASJ_StrError(self, err_code)

    def XASJ_Version(self):
        return _py_t2sdk_api.CConnectionInterface_XASJ_Version(self)

    def GEER_CertRevokeByCid(self, sks_user, sks_server, sks_password, cert_cid):
        return _py_t2sdk_api.CConnectionInterface_GEER_CertRevokeByCid(self, sks_user, sks_server, sks_password, cert_cid)
    __swig_destroy__ = _py_t2sdk_api.delete_CConnectionInterface

# Register CConnectionInterface in _py_t2sdk_api:
_py_t2sdk_api.CConnectionInterface_swigregister(CConnectionInterface)

def GetVersionInfo():
    return _py_t2sdk_api.GetVersionInfo()

def NewConfig():
    return _py_t2sdk_api.NewConfig()

def NewConnection(lpConfig):
    return _py_t2sdk_api.NewConnection(lpConfig)

def NewPacker(iVersion):
    return _py_t2sdk_api.NewPacker(iVersion)

def NewUnPacker(lpBuffer, iLen):
    return _py_t2sdk_api.NewUnPacker(lpBuffer, iLen)

def NewUnPackerV1(lpBuffer, iLen):
    return _py_t2sdk_api.NewUnPackerV1(lpBuffer, iLen)

def GetPackVersion(lpBuffer):
    return _py_t2sdk_api.GetPackVersion(lpBuffer)

def Encode(EncodePass, Password, nReserve=0):
    return _py_t2sdk_api.Encode(EncodePass, Password, nReserve)

def EncodeEx(pIn, pOut):
    return _py_t2sdk_api.EncodeEx(pIn, pOut)

def NewFilter():
    return _py_t2sdk_api.NewFilter()

def NewSubscribeParam():
    return _py_t2sdk_api.NewSubscribeParam()

def NewBizMessage():
    return _py_t2sdk_api.NewBizMessage()

def NewBizMessageEx(nCompressID=1):
    return _py_t2sdk_api.NewBizMessageEx(nCompressID)

def GetMultiNetWorkSpeed(lpRequest, lpResult, uiTimeOut):
    return _py_t2sdk_api.GetMultiNetWorkSpeed(lpRequest, lpResult, uiTimeOut)

def t2sdk_library_init():
    return _py_t2sdk_api.t2sdk_library_init()

def t2sdk_library_end():
    return _py_t2sdk_api.t2sdk_library_end()

def GetRateBytes(iSend, iRecv):
    return _py_t2sdk_api.GetRateBytes(iSend, iRecv)

def ReSetRateBytes():
    return _py_t2sdk_api.ReSetRateBytes()

def GetNetWorkSpeed(lpAddress, port, lpResult):
    return _py_t2sdk_api.GetNetWorkSpeed(lpAddress, port, lpResult)

def SetCommCfgFile(szCommCfgFile):
    return _py_t2sdk_api.SetCommCfgFile(szCommCfgFile)
class UtilsHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def gbk2utf8(data):
        return _py_t2sdk_api.UtilsHelper_gbk2utf8(data)

    @staticmethod
    def utf82gbk(data):
        return _py_t2sdk_api.UtilsHelper_utf82gbk(data)

    @staticmethod
    def gbk2utf8Str(gbk):
        return _py_t2sdk_api.UtilsHelper_gbk2utf8Str(gbk)

    @staticmethod
    def utf82gbkStr(utf8):
        return _py_t2sdk_api.UtilsHelper_utf82gbkStr(utf8)

    def __init__(self):
        _py_t2sdk_api.UtilsHelper_swiginit(self, _py_t2sdk_api.new_UtilsHelper())
    __swig_destroy__ = _py_t2sdk_api.delete_UtilsHelper

# Register UtilsHelper in _py_t2sdk_api:
_py_t2sdk_api.UtilsHelper_swigregister(UtilsHelper)
class T2Api(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _py_t2sdk_api.T2Api_swiginit(self, _py_t2sdk_api.new_T2Api())
    __swig_destroy__ = _py_t2sdk_api.delete_T2Api

    def init(self, *args):
        return _py_t2sdk_api.T2Api_init(self, *args)

    def release(self):
        return _py_t2sdk_api.T2Api_release(self)

    def connect(self, *args):
        return _py_t2sdk_api.T2Api_connect(self, *args)

    def send(self, req):
        return _py_t2sdk_api.T2Api_send(self, req)

    def recv(self, *args):
        return _py_t2sdk_api.T2Api_recv(self, *args)

    def setUtf8(self, flag):
        return _py_t2sdk_api.T2Api_setUtf8(self, flag)

    def getRecords(self):
        return _py_t2sdk_api.T2Api_getRecords(self)

    def getErrMsg(self):
        return _py_t2sdk_api.T2Api_getErrMsg(self)

# Register T2Api in _py_t2sdk_api:
_py_t2sdk_api.T2Api_swigregister(T2Api)

